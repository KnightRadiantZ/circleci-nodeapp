version: 2.1

# --------------------------------------------------
# executors: common execution environment
# --------------------------------------------------
executors:
  # executor environment for linux or generic cli
  docker-executor:
    docker:
      - image: cimg/node:14.17.5
    working_directory: ~/repo
  # executor environment for macos
  macos-executor:
    # example of using parameters and then passing it to environment var
    parameters:
      os:
        default: "macos"
        type: string
    environment:
      PLATFORM_OS: << parameters.os >>
    macos:
      xcode: "14.2.0"
    resource_class: macos.x86.medium.gen2
    working_directory: ~/repo

# --------------------------------------------------
# aliases: common steps
# --------------------------------------------------
aliases:
  # declare alias for this run using "&"
  - &echo-some-stuff
    run:
      name: Show current branch
      command: echo "Branch = ${CIRCLE_BRANCH}"
  - &save-cache
    # run: cat /tmp/platform-os
    save_cache: # Save cache so it is faster next time
      # key: ckey-{{ checksum "/tmp/platform-os" }}-{{ checksum "package.json" }}
      key: ckey-macos-{{ checksum "package.json" }}
      paths:
        - node_modules
  - &restore-cache
    # run: cat /tmp/platform-os
    restore_cache: # Restore cache if available so it is faster
      # key: ckey-{{ checksum "/tmp/platform-os" }}-{{ checksum "package.json" }}
      key: ckey-macos-{{ checksum "package.json" }}
  - &install-dependencies
    run:
      # ------------------------------------
      # If needed to use yarn instead of npm
      # ------------------------------------
      # - run:
      #     name: Install yarn
      #     command: npm install -g yarn
      # - run:
      #     name: Install dependencies
      #     command: yarn install
      name: Install dependencies
      command: npm install
  - &install-dpkg-fakeroot
    run:
      name: Install dpkg and fakeroot
      command: |
        sudo apt-get update -y
        sudo apt-get install -y dpkg fakeroot
  - &run-jest-unit-test
    run:
      name: Run jest unit test
      command: npm run unit-test
  - &install-aws-cli
    run:
      name: Installing AWS CLI
      working_directory: /
      command: |
        sudo apt-get -y -qq update
        sudo apt-get install -y awscli
        sudo apt-get install -y python3-pip python-dev build-essential
  - &build-project
    run:
      name: Build project
      command: |
        npm install
        # npm run build
        mkdir build
        cd build
        # zip ../build.zip -r * .[^.]*
        echo "<html><h1>Hello Joseph Evasco, today is $(date)</h1></html>" > index.html
        echo "Build successful"
  - &show-pwd-then-ls
    run:
      name: Show pwd and ls
      command: |
        pwd
        ls -ltr
  - &show-aws-s3-buckets
    run:
      name: Show AWS S3 buckets
      command: aws s3 ls

# --------------------------------------------------
# commands: common full steps block
# --------------------------------------------------
# commands:
#   # checkout branch and run install deps with caching based on runtime platform os
#   checkout-install-deps:
#     # parameters:
#     #   os1:
#     #     type: string
#     steps:
#       - checkout # Checkout this branch
#       - *echo-some-stuff # call alias with "*"
#       - run: echo "Platform OS = << parameters.os >>"
#       - run: echo "<< parameters.os1 >>" > /tmp/platform-os
#       - *restore-cache
#       - *install-dependencies
#       - *save-cache
#   # build and run makers to package (zip) electron app for runtime platform os
#   build:
#     parameters:
#       os:
#         type: string
#     steps:
#       - checkout-install-deps
#           # os1: << parameters.os >>
#       - run:
#           name: Generate Builds
#           command: npm run make
#       - store_artifacts:
#           path: ~/repo/out/make
#       - persist_to_workspace:
#           root: out
#           paths:
#             - make
#       - *run-jest-unit-test

# --------------------------------------------------
# jobs: different jobs configurations
# --------------------------------------------------
jobs:
  # job: build electron app on macos
  build-macos:
    # call executor define at top with parameter value pass (not really used)
    executor: 
      name: macos-executor
      # os: macos
    steps:
      # Commands will execute in macOS container
      # with Xcode 14.2.0 installed
      - run: 
          name: Show xcodebuild version
          command: xcodebuild -version
      - checkout # Checkout this branch
      - *echo-some-stuff # call alias with "*"
      # - run: echo "Platform OS = << parameters.os >>"
      # - run: echo "<< parameters.os1 >>" > /tmp/platform-os
      - *restore-cache
      - *install-dependencies
      - *save-cache
      - run:
          name: Generate Builds
          command: npm run make
      - store_artifacts:
          path: ~/repo/out/make
      - persist_to_workspace:
          root: out
          paths:
            - make
      - *run-jest-unit-test

  # build-linux:
  #   # call executor define at top
  #   executor: docker-executor
  #   steps:
  #     - build:
  #         os: "linux"

  playwright-macos:
    executor: macos-executor
    steps:
      - checkout # Checkout this branch
      - *echo-some-stuff # call alias with "*"
      # - run: echo "Platform OS = << parameters.os >>"
      # - run: echo "<< parameters.os1 >>" > /tmp/platform-os
      - *restore-cache
      - *install-dependencies
      - *save-cache
      - attach_workspace:
          # Must be absolute path or relative path from working_directory
          at: ~/repo/out
      - run: ls -ltR ~/repo/out
      # unzip app file
      # test local to read from unzip app file
      # run test here

  deploy-to-aws-s3:
    # call executor define at top
    executor: docker-executor
    steps:
      - checkout # Checkout this branch
      - *echo-some-stuff # call alias with "*"
      - *install-aws-cli
      - *build-project
      - *show-pwd-then-ls
      - *show-aws-s3-buckets
      - run:
          name: Deploy project to AWS S3
          # aws cli commands doc: https://docs.aws.amazon.com/cli/latest/userguide/cli-services-s3-commands.html
          command: |
            if [ "${CIRCLE_BRANCH}" == "master" ]
            then
              aws --region ${AWS_REGION} s3 sync ~/repo/build s3://${AWS_BUCKET_PROD} --delete
            else
              aws --region ${AWS_REGION} s3 sync ~/repo/build s3://${AWS_BUCKET_DEV} --delete
            fi

  deploy-to-aws-cloudfront:
    # call executor define at top
    executor: docker-executor
    steps:
      - checkout # Checkout this branch
      - *echo-some-stuff # call alias with "*"
      - *install-aws-cli
      - *build-project
      - *show-pwd-then-ls
      - *show-aws-s3-buckets
      - run:
          name: Deploy project to AWS Cloudfront
          # aws cli commands doc: https://docs.aws.amazon.com/cli/latest/reference/cloudfront/create-invalidation.html
          command: |
            aws configure set preview.cloudfront true
            if [ "${CIRCLE_BRANCH}" == "master" ]
            then
              aws cloudfront create-invalidation --distribution-id ${AWS_DISTRIBUTION_ID_PROD} --paths /\*
            else
              aws cloudfront create-invalidation --distribution-id ${AWS_DISTRIBUTION_ID_DEV} --paths /\*
            fi

# --------------------------------------------------
# workflows: 
# --------------------------------------------------
workflows:
  build_and_deploy:
    jobs:
      - build-macos
      - playwright-macos
          requires:
            - build-macos
      # - build-linux
      # - deploy-to-aws-s3:
      #     requires:
      #       - build
      #     filters:
      #       branches:
      #         only:
      #           - master
      # - deploy-to-aws-cloudfront:
      #     requires:
      #       - deploy-to-aws-s3
      #     filters:
      #       branches:
      #         only:
      #           - master