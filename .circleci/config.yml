version: 2.1

# --------------------------------------------------
# executors: common execution environment
# --------------------------------------------------
executors:
  # executor environment for linux or generic cli
  docker-executor:
    docker:
      - image: cimg/node:14.17.5
    working_directory: ~/proj
  # executor environment for macos
  macos-executor:
    # example of using parameters and then passing it to environment var
    parameters:
      os:
        default: "macos"
        type: string
    environment:
      PLATFORM_OS: << parameters.os >>
    macos:
      xcode: "14.2.0"
    resource_class: macos.x86.medium.gen2
    working_directory: ~/proj
 
# --------------------------------------------------
# aliases: common steps
# - use & to define alias and * to access it
# --------------------------------------------------
aliases:
  # --------------------------------------------------
  # macos aliases: common steps for macos
  # --------------------------------------------------
  - &save-cache-macos
    # run: cat /tmp/platform-os
    save_cache: # Save cache so it is faster next time
      # key: ckey-{{ checksum "/tmp/platform-os" }}-{{ checksum "package.json" }}
      key: ckey-macos-{{ checksum "package.json" }}
      paths:
        - node_modules
  - &restore-cache-macos
    # run: cat /tmp/platform-os
    restore_cache: # Restore cache if available so it is faster
      # key: ckey-{{ checksum "/tmp/platform-os" }}-{{ checksum "package.json" }}
      key: ckey-macos-{{ checksum "package.json" }}
  # --------------------------------------------------
  # --------------------------------------------------
  - &echo-some-stuff
    run:
      name: Show current branch
      command: echo "Branch = ${CIRCLE_BRANCH}"
  - &install-dependencies
    run:
      # ------------------------------------
      # If needed to use yarn instead of npm
      # ------------------------------------
      # - run:
      #     name: Install yarn
      #     command: npm install -g yarn
      # - run:
      #     name: Install dependencies
      #     command: yarn install
      name: Install dependencies
      command: |
        npm install
  - &install-dpkg-fakeroot
    run:
      name: Install dpkg and fakeroot
      command: |
        sudo apt-get update -y
        sudo apt-get install -y dpkg fakeroot
  - &run-jest-unit-test
    run:
      name: Run jest unit test
      command: npm run unit-test
  - &install-aws-cli
    run:
      name: Installing AWS CLI
      working_directory: /
      command: |
        sudo apt-get -y -qq update
        sudo apt-get install -y awscli
        sudo apt-get install -y python3-pip python-dev build-essential
  - &build-project
    run:
      name: Build project
      command: |
        npm install
        # npm run build
        mkdir build
        cd build
        # zip ../build.zip -r * .[^.]*
        echo "<html><h1>Hello Joseph Evasco, today is $(date)</h1></html>" > index.html
        echo "Build successful"
  - &show-pwd-then-ls
    run:
      name: Show pwd and ls
      command: |
        pwd
        ls -ltr
  - &show-aws-s3-buckets
    run:
      name: Show AWS S3 buckets
      command: aws s3 ls

# --------------------------------------------------
# anchors: common stuff
# - TODO: read more on doc
# --------------------------------------------------
# JE: this was taken from slack-desktop to test a change we might need to do in there
anchors:
  # To implement tag-triggered workflows:
  #
  # 1. Add a `when:` property to the top level of the workflow object,
  #    specifying which tag or tag patterns should trigger the workflow. See
  #    nightly and run-release-build for examples.
  #
  # 2. Add the following anchor to every job in the workflow. Unfortunately,
  #    CircleCI jobs ignore tag triggers by default, and there is no
  #    workflow-level setting that lets you enable tag triggers.
  filters-tag-triggered-workflow-job: &filters-tag-triggered-workflow-job
    # filters like this are only applied on job level in the workflow
    filters:
      tags:
        only: /.*/
  filters-ignore-branches: &filters-ignore-branches
    filters:
      branches:
        ignore: some-branch-1
       
# --------------------------------------------------
# commands: common full steps block
# --------------------------------------------------
commands:
  # --------------------------------------------------
  # macos commands: common full steps block for macos
  # --------------------------------------------------
  # checkout branch and run install deps with caching based on runtime platform os
  install-deps-macos:
    # parameters:
    #   os1:
    #     type: string
    steps:
      - *echo-some-stuff # call alias with "*"
      - run: 
          command: |
            xcodebuild -version
            node -v
      - checkout # Checkout this branch
      - *restore-cache-macos
      - *install-dependencies # TODO: is this only requires if restore-cache-macos was not able to find a cache
      - *save-cache-macos

# --------------------------------------------------
# jobs: different jobs configurations
# --------------------------------------------------
jobs:
  # --------------------------------------------------
  # macos jobs: different jobs configurations for macos
  # --------------------------------------------------
  # job: build electron app on macos
  build-macos:
    # call executor define at top with parameter value pass (not really used)
    executor: 
      name: macos-executor
      # os: macos
    steps:
      - install-deps-macos
      - run:
          name: Generate Builds
          command: npm run make
      - run:
          name: See generated build (for future debugging)
          command: |
            ls -ltR ~/proj/out
            export APP_FOLDER="$(basename out/make/zip/darwin/x64/*.zip .zip)"
            echo $APP_FOLDER
      - store_artifacts:
          path: ~/proj/out/make
      - persist_to_workspace:
          root: out
          paths:
            - my-electron-app-darwin-x64
      - *run-jest-unit-test

  # --------------------------------------------------
  # linux jobs: different jobs configurations for linux
  # --------------------------------------------------
  # job: build electron app on linux
  build-linux:
    # call executor define at top
    executor: docker-executor
    steps:
      - *echo-some-stuff # call alias with "*"
      - checkout # Checkout this branch

  # job: run ui e2e test using playwright on macos
  test-ui-e2e-pw-macos:
    executor: macos-executor
    steps:
      - install-deps-macos
      - attach_workspace:
          # Must be absolute path or relative path from working_directory
          at: ~/proj/out
      - run: 
          name: See attached workspace and create screenshot dir
          command: |
            ls -ltR ~/proj/out
            mkdir -p ~proj/out/report/{html,xml,screenshot}
      - run: 
          name: Run ui e2e tests using playwright
          command: | 
            npm run pw-test
      - store_artifacts:
          path: ~/proj/out/report
      - store_test_results:
          path: out/report/xml

  # job: run ui e2e test using wdio on macos
  test-ui-e2e-wdio-macos:
    executor: macos-executor
    steps:
      - install-deps-macos
      - attach_workspace:
          # Must be absolute path or relative path from working_directory
          at: ~/proj/out
      - run: 
          name: See attached workspace and create screenshot dir
          command: |
            ls -ltR ~/proj/out
            mkdir -p ~proj/out/report/{html,xml,screenshot}
      - run: 
          name: Run ui e2e tests using wdio
          command: | 
            npm run wdio-test
      # - store_artifacts:
      #     path: ~/proj/out/report
      # - store_test_results:
      #     path: out/report/xml

  deploy-to-aws-s3:
    # call executor define at top
    executor: docker-executor
    steps:
      - checkout # Checkout this branch
      - *echo-some-stuff # call alias with "*"
      - *install-aws-cli
      - *build-project
      - *show-pwd-then-ls
      - *show-aws-s3-buckets
      - run:
          name: Deploy project to AWS S3
          # aws cli commands doc: https://docs.aws.amazon.com/cli/latest/userguide/cli-services-s3-commands.html
          command: |
            if [ "${CIRCLE_BRANCH}" == "master" ]
            then
              aws --region ${AWS_REGION} s3 sync ~/proj/build s3://${AWS_BUCKET_PROD} --delete
            else
              aws --region ${AWS_REGION} s3 sync ~/proj/build s3://${AWS_BUCKET_DEV} --delete
            fi

  deploy-to-aws-cloudfront:
    # call executor define at top
    executor: docker-executor
    steps:
      - checkout # Checkout this branch
      - *echo-some-stuff # call alias with "*"
      - *install-aws-cli
      - *build-project
      - *show-pwd-then-ls
      - *show-aws-s3-buckets
      - run:
          name: Deploy project to AWS Cloudfront
          # aws cli commands doc: https://docs.aws.amazon.com/cli/latest/reference/cloudfront/create-invalidation.html
          command: |
            aws configure set preview.cloudfront true
            if [ "${CIRCLE_BRANCH}" == "master" ]
            then
              aws cloudfront create-invalidation --distribution-id ${AWS_DISTRIBUTION_ID_PROD} --paths /\*
            else
              aws cloudfront create-invalidation --distribution-id ${AWS_DISTRIBUTION_ID_DEV} --paths /\*
            fi

# --------------------------------------------------
# workflows: 
# --------------------------------------------------
workflows:
  build-test-app-macos:
    jobs:
      - build-macos:
          <<: *filters-ignore-branches
          <<: *filters-tag-triggered-workflow-job
      - test-ui-e2e-pw-macos:
          <<: *filters-ignore-branches
          requires:
            - build-macos
      - test-ui-e2e-wdio-macos:
          <<: *filters-ignore-branches
          requires:
            - build-macos
      - build-linux:
          <<: *filters-ignore-branches
      # - deploy-to-aws-s3:
      #     requires:
      #       - build
      #     filters:
      #       branches:
      #         only:
      #           - master
      # - deploy-to-aws-cloudfront:
      #     requires:
      #       - deploy-to-aws-s3
      #     filters:
      #       branches:
      #         only:
      #           - master
  dummy-workflow-for-testing:
    jobs:
      - build-macos
      - test-ui-e2e-wdio-macos:
          requires:
            - build-macos
